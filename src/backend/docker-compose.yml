version: '3.8'

services:
  # FastAPI Backend Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/catalog_search
      - REDIS_URL=redis://cache:6379/0
      - CELERY_BROKER_URL=redis://cache:6379/1
      - CELERY_RESULT_BACKEND=redis://cache:6379/2
      - LOG_LEVEL=DEBUG
      - CORS_ORIGINS=http://localhost:3000
      - MAX_WORKERS=4
    ports:
      - "8000:8000"
    volumes:
      - ./:/app:delegated
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: '4G'
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend_network

  # Celery Worker for Async Tasks
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    command: celery -A app.worker.celery worker --loglevel=info
    environment:
      - ENVIRONMENT=development
      - REDIS_URL=redis://cache:6379/0
      - CELERY_BROKER_URL=redis://cache:6379/1
      - CELERY_RESULT_BACKEND=redis://cache:6379/2
    volumes:
      - ./:/app:delegated
    depends_on:
      - cache
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: '4G'
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - backend_network

  # Redis Cache and Message Broker
  cache:
    image: redis:7.2-alpine
    command: redis-server --appendonly yes --requirepass redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - backend_network

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=catalog_search
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend_network

volumes:
  postgres_data:
    name: catalog_search_postgres_data
  redis_data:
    name: catalog_search_redis_data

networks:
  backend_network:
    driver: bridge
    internal: true
    enable_ipv6: false
    attachable: true