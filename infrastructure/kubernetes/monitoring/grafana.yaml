---
# Persistent Volume Claim for Grafana storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: monitoring
  labels:
    app: grafana
    component: monitoring
    part-of: catalog-search
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: default

---
# ConfigMap for Grafana main configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: monitoring
  labels:
    app: grafana
    component: monitoring
    part-of: catalog-search
data:
  grafana.ini: |
    [server]
    root_url = https://grafana.catalog-search.local
    serve_from_sub_path = true

    [security]
    admin_user = admin
    cookie_secure = true
    cookie_samesite = strict
    allow_embedding = true
    disable_gravatar = true
    strict_transport_security = true
    strict_transport_security_max_age_seconds = 31536000
    
    [auth]
    disable_login_form = false
    oauth_auto_login = false
    disable_signout_menu = false
    
    [users]
    allow_sign_up = false
    auto_assign_org_role = Viewer
    
    [dashboards]
    min_refresh_interval = 5s
    
    [metrics]
    enabled = true
    basic_auth_username = metrics
    
    [log]
    mode = console
    level = info

---
# ConfigMap for Grafana datasources
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
  labels:
    app: grafana
    component: monitoring
    part-of: catalog-search
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus-service:9090
        isDefault: true
        version: 1
        editable: false
        jsonData:
          timeInterval: "15s"
          queryTimeout: "30s"
          httpMethod: "POST"
        secureJsonData:
          httpHeaderValue1: "Bearer ${PROMETHEUS_TOKEN}"

---
# ConfigMap for Grafana dashboards
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: monitoring
  labels:
    app: grafana
    component: monitoring
    part-of: catalog-search
data:
  system-metrics.json: |
    {
      "title": "System Metrics",
      "uid": "system-metrics",
      "panels": []
    }
  api-performance.json: |
    {
      "title": "API Performance",
      "uid": "api-performance",
      "panels": []
    }
  security-monitoring.json: |
    {
      "title": "Security Monitoring",
      "uid": "security-monitoring",
      "panels": []
    }

---
# Secret for Grafana credentials
apiVersion: v1
kind: Secret
metadata:
  name: grafana-secrets
  namespace: monitoring
  labels:
    app: grafana
    component: monitoring
    part-of: catalog-search
type: Opaque
data:
  admin-password: ${GRAFANA_ADMIN_PASSWORD}

---
# Deployment for Grafana
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
    component: monitoring
    part-of: catalog-search
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
    spec:
      securityContext:
        fsGroup: 472
        runAsUser: 472
        runAsNonRoot: true
      containers:
        - name: grafana
          # grafana v10.1.0
          image: grafana/grafana:10.1.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
              name: http
              protocol: TCP
          resources:
            requests:
              cpu: 200m
              memory: 512Mi
            limits:
              cpu: 500m
              memory: 1Gi
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
            - name: grafana-config
              mountPath: /etc/grafana
            - name: grafana-dashboards
              mountPath: /var/lib/grafana/dashboards
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-secrets
                  key: admin-password
            - name: GF_AUTH_ANONYMOUS_ENABLED
              value: "false"
            - name: GF_SECURITY_ALLOW_EMBEDDING
              value: "true"
            - name: GF_SECURITY_COOKIE_SECURE
              value: "true"
            - name: GF_SECURITY_COOKIE_SAMESITE
              value: "strict"
          livenessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 60
            timeoutSeconds: 30
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 30
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-pvc
        - name: grafana-config
          configMap:
            name: grafana-config
        - name: grafana-dashboards
          configMap:
            name: grafana-dashboards
        - name: grafana-datasources
          configMap:
            name: grafana-datasources

---
# Service for Grafana
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
    component: monitoring
    part-of: catalog-search
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: grafana

---
# Network Policy for Grafana
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: grafana-network-policy
  namespace: monitoring
  labels:
    app: grafana
    component: monitoring
    part-of: catalog-search
spec:
  podSelector:
    matchLabels:
      app: grafana
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
        - podSelector:
            matchLabels:
              app: prometheus
      ports:
        - protocol: TCP
          port: 3000
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              name: monitoring
        - podSelector:
            matchLabels:
              app: prometheus
      ports:
        - protocol: TCP
          port: 9090