name: Deploy to Development

on:
  workflow_run:
    workflows: ['Backend CI', 'Frontend CI']
    types: [completed]
    branches: [develop]
  workflow_dispatch:
    inputs:
      deploy_frontend:
        type: boolean
        default: true
        description: 'Deploy frontend service'
      deploy_backend:
        type: boolean
        default: true
        description: 'Deploy backend service'
      skip_health_check:
        type: boolean
        default: false
        description: 'Skip deployment health verification'

env:
  ENVIRONMENT: development
  NAMESPACE: catalog-search-dev
  DEPLOYMENT_TIMEOUT: 600s
  HEALTH_CHECK_RETRIES: 5

concurrency:
  group: development
  cancel-in-progress: false

jobs:
  deploy:
    name: Deploy Services
    runs-on: ubuntu-latest
    environment:
      name: development
      url: https://dev.catalog-search.example.com

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}

      - name: Set deployment variables
        id: vars
        run: |
          echo "DEPLOY_ID=$(date +%s)" >> $GITHUB_ENV
          echo "START_TIME=$(date -u '+%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV

      - name: Validate GPU nodes
        run: |
          kubectl get nodes -l nvidia.com/gpu=true --no-headers | grep -q . || {
            echo "Error: No GPU nodes found in cluster"
            exit 1
          }

      - name: Create namespace if not exists
        run: |
          kubectl get namespace ${{ env.NAMESPACE }} || \
          kubectl create namespace ${{ env.NAMESPACE }}

      - name: Deploy backend service
        if: ${{ github.event.inputs.deploy_backend != 'false' }}
        uses: azure/k8s-deploy@v4
        with:
          namespace: ${{ env.NAMESPACE }}
          manifests: |
            infrastructure/kubernetes/backend/deployment.yaml
          images: |
            ${{ needs.backend-ci.outputs.docker-image }}:${{ needs.backend-ci.outputs.image-tag }}
          strategy: rolling
          timeout: ${{ env.DEPLOYMENT_TIMEOUT }}
          annotate-namespace: true

      - name: Deploy frontend service
        if: ${{ github.event.inputs.deploy_frontend != 'false' }}
        uses: azure/k8s-deploy@v4
        with:
          namespace: ${{ env.NAMESPACE }}
          manifests: |
            infrastructure/kubernetes/frontend/deployment.yaml
          images: |
            ${{ needs.frontend-ci.outputs.docker-image }}:${{ needs.frontend-ci.outputs.image-tag }}
          strategy: rolling
          timeout: ${{ env.DEPLOYMENT_TIMEOUT }}
          annotate-namespace: true

      - name: Verify deployment health
        if: ${{ github.event.inputs.skip_health_check != 'true' }}
        run: |
          for i in $(seq 1 ${{ env.HEALTH_CHECK_RETRIES }}); do
            BACKEND_READY=$(kubectl -n ${{ env.NAMESPACE }} get deploy backend -o jsonpath='{.status.readyReplicas}')
            FRONTEND_READY=$(kubectl -n ${{ env.NAMESPACE }} get deploy frontend -o jsonpath='{.status.readyReplicas}')
            BACKEND_DESIRED=$(kubectl -n ${{ env.NAMESPACE }} get deploy backend -o jsonpath='{.spec.replicas}')
            FRONTEND_DESIRED=$(kubectl -n ${{ env.NAMESPACE }} get deploy frontend -o jsonpath='{.spec.replicas}')
            
            if [ "$BACKEND_READY" = "$BACKEND_DESIRED" ] && [ "$FRONTEND_READY" = "$FRONTEND_DESIRED" ]; then
              echo "All deployments are healthy"
              exit 0
            fi
            
            echo "Waiting for deployments to be ready (attempt $i/${{ env.HEALTH_CHECK_RETRIES }})..."
            sleep 30
          done
          
          echo "Deployment health check failed"
          exit 1

      - name: Rollback on failure
        if: failure()
        run: |
          if [ "${{ github.event.inputs.deploy_backend }}" != "false" ]; then
            kubectl -n ${{ env.NAMESPACE }} rollout undo deployment/backend
          fi
          if [ "${{ github.event.inputs.deploy_frontend }}" != "false" ]; then
            kubectl -n ${{ env.NAMESPACE }} rollout undo deployment/frontend
          fi

      - name: Send deployment notification
        if: always()
        run: |
          DEPLOY_STATUS="${{ job.status }}"
          DEPLOY_DURATION=$(($(date +%s) - ${{ env.DEPLOY_ID }}))
          
          curl -X POST ${{ secrets.DEPLOYMENT_NOTIFICATION_WEBHOOK }} \
            -H "Content-Type: application/json" \
            -d "{
              \"deployment_id\": \"${{ env.DEPLOY_ID }}\",
              \"environment\": \"${{ env.ENVIRONMENT }}\",
              \"status\": \"$DEPLOY_STATUS\",
              \"duration_seconds\": $DEPLOY_DURATION,
              \"start_time\": \"${{ env.START_TIME }}\",
              \"end_time\": \"$(date -u '+%Y-%m-%dT%H:%M:%SZ')\",
              \"triggered_by\": \"${{ github.actor }}\"
            }"