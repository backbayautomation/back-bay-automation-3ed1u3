# Security Scan Workflow v1.0
# Comprehensive security scanning for frontend, backend, and container components
# Includes SAST, dependency checks, compliance validation for GDPR, SOC 2, ISO 27001, and NIST 800-53

name: Security Scan

on:
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight UTC
  push:
    branches: ['main', 'develop']
  pull_request:
    branches: ['main', 'develop']

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18.x'
  SNYK_SEVERITY_THRESHOLD: 'high'
  SCAN_TIMEOUT_MINUTES: '30'
  COMPLIANCE_CHECK_LEVEL: 'strict'

jobs:
  backend-security-scan:
    name: Backend Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: ${{ env.SCAN_TIMEOUT_MINUTES }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety

      - name: Run Snyk Python Scan
        uses: snyk/actions/python@v3
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=${{ env.SNYK_SEVERITY_THRESHOLD }}

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@v2.7.0
        with:
          project: 'backend'
          path: '.'
          format: 'HTML'
          args: >
            --suppression suppression.xml
            --failOnCVSS 7
            --enableRetired

      - name: Run Bandit SAST Scan
        run: |
          bandit -r ./backend -f json -o bandit-results.json
          bandit -r ./backend -f html -o bandit-results.html

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python
          queries: security-extended

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: SonarQube Analysis
        uses: SonarSource/sonarqube-scan-action@v1.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=backend
            -Dsonar.sources=./backend
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.python.bandit.reportPaths=bandit-results.json

      - name: Generate Security Report
        run: |
          echo "# Backend Security Scan Report" > backend-security-report.md
          echo "## Scan Time: $(date)" >> backend-security-report.md
          echo "## Findings Summary" >> backend-security-report.md
          jq -r . bandit-results.json >> backend-security-report.md

      - name: Cache Scan Results
        uses: actions/cache@v3
        with:
          path: |
            bandit-results.json
            dependency-check-report.html
            backend-security-report.md
          key: ${{ runner.os }}-backend-security-${{ github.sha }}

      - name: Upload Security Reports
        uses: actions/upload-artifact@v3
        with:
          name: backend-security-report
          path: |
            backend-security-report.md
            bandit-results.html
            dependency-check-report.html

  frontend-security-scan:
    name: Frontend Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: ${{ env.SCAN_TIMEOUT_MINUTES }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Snyk Node.js Scan
        uses: snyk/actions/node@v3
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=${{ env.SNYK_SEVERITY_THRESHOLD }}

      - name: Run npm audit
        run: npm audit --json > npm-audit.json || true

      - name: Run ESLint Security Rules
        run: |
          npm install eslint-plugin-security
          npx eslint . -c .eslintrc.js --plugin security --format json > eslint-results.json

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          queries: security-and-quality

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: SonarQube Analysis
        uses: SonarSource/sonarqube-scan-action@v1.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=frontend
            -Dsonar.sources=./frontend
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

      - name: Generate Security Report
        run: |
          echo "# Frontend Security Scan Report" > frontend-security-report.md
          echo "## Scan Time: $(date)" >> frontend-security-report.md
          echo "## npm audit findings" >> frontend-security-report.md
          cat npm-audit.json >> frontend-security-report.md

      - name: Cache Scan Results
        uses: actions/cache@v3
        with:
          path: |
            npm-audit.json
            eslint-results.json
            frontend-security-report.md
          key: ${{ runner.os }}-frontend-security-${{ github.sha }}

      - name: Upload Security Reports
        uses: actions/upload-artifact@v3
        with:
          name: frontend-security-report
          path: |
            frontend-security-report.md
            npm-audit.json
            eslint-results.json

  container-security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: [backend-security-scan, frontend-security-scan]
    timeout-minutes: ${{ env.SCAN_TIMEOUT_MINUTES }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Build Containers
        run: |
          docker-compose build

      - name: Run Trivy Container Scan
        uses: aquasecurity/trivy-action@0.16.1
        with:
          image-ref: 'local-image'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Run Snyk Container Scan
        uses: snyk/actions/docker@v3
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: local-image
          args: --file=Dockerfile

      - name: Run Docker Bench Security
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            docker/docker-bench-security > docker-bench-results.txt

      - name: Generate Container Scan Report
        run: |
          echo "# Container Security Scan Report" > container-security-report.md
          echo "## Scan Time: $(date)" >> container-security-report.md
          echo "## Trivy Findings" >> container-security-report.md
          cat trivy-results.sarif >> container-security-report.md

      - name: Upload Container Scan Reports
        uses: actions/upload-artifact@v3
        with:
          name: container-security-report
          path: |
            container-security-report.md
            trivy-results.sarif
            docker-bench-results.txt

  compliance-validation:
    name: Compliance Validation
    runs-on: ubuntu-latest
    needs: [backend-security-scan, frontend-security-scan, container-security-scan]
    timeout-minutes: ${{ env.SCAN_TIMEOUT_MINUTES }}

    steps:
      - name: Download All Scan Reports
        uses: actions/download-artifact@v3
        with:
          path: security-reports

      - name: Validate GDPR Requirements
        run: |
          echo "Validating GDPR compliance requirements..."
          python scripts/compliance/gdpr_validator.py \
            --reports-dir security-reports \
            --level ${{ env.COMPLIANCE_CHECK_LEVEL }}

      - name: Check SOC 2 Type II Controls
        run: |
          echo "Validating SOC 2 Type II controls..."
          python scripts/compliance/soc2_validator.py \
            --reports-dir security-reports \
            --level ${{ env.COMPLIANCE_CHECK_LEVEL }}

      - name: Verify ISO 27001 Compliance
        run: |
          echo "Verifying ISO 27001 compliance..."
          python scripts/compliance/iso27001_validator.py \
            --reports-dir security-reports \
            --level ${{ env.COMPLIANCE_CHECK_LEVEL }}

      - name: Validate NIST 800-53 Controls
        run: |
          echo "Validating NIST 800-53 controls..."
          python scripts/compliance/nist_validator.py \
            --reports-dir security-reports \
            --level ${{ env.COMPLIANCE_CHECK_LEVEL }}

      - name: Generate Compliance Report
        run: |
          echo "# Compliance Validation Report" > compliance-report.md
          echo "## Validation Time: $(date)" >> compliance-report.md
          echo "## Compliance Status" >> compliance-report.md
          cat */validation-results.json >> compliance-report.md

      - name: Create Compliance Evidence Package
        run: |
          zip -r compliance-evidence.zip \
            security-reports/* \
            compliance-report.md \
            */validation-results.json

      - name: Upload Compliance Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: compliance-report
          path: |
            compliance-report.md
            compliance-evidence.zip

      - name: Generate Security Summary
        run: |
          echo "# Security and Compliance Summary" > security-summary.md
          echo "## Overview" >> security-summary.md
          echo "### Security Findings" >> security-summary.md
          python scripts/reporting/generate_summary.py \
            --reports-dir security-reports \
            --output security-summary.md

      - name: Upload Security Summary
        uses: actions/upload-artifact@v3
        with:
          name: security-summary
          path: security-summary.md