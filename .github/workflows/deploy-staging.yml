name: Deploy to Staging

on:
  push:
    branches:
      - develop
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  packages: write
  deployments: write
  environments: write
  security-events: write

concurrency:
  group: staging
  cancel-in-progress: true

env:
  ENVIRONMENT: staging
  AZURE_CREDENTIALS: ${{ secrets.AZURE_STAGING_CREDENTIALS }}
  ACR_NAME: ${{ secrets.STAGING_ACR_NAME }}
  CLUSTER_NAME: ${{ secrets.STAGING_AKS_CLUSTER_NAME }}
  RESOURCE_GROUP: ${{ secrets.STAGING_RESOURCE_GROUP }}
  TF_WORKSPACE: staging
  DEPLOY_TIMEOUT: '600'
  HEALTH_CHECK_RETRIES: '5'
  LOAD_TEST_DURATION: '300'

jobs:
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.app_url }}
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Initialize Terraform
        working-directory: infrastructure/terraform/environments/staging
        run: |
          terraform init -backend=true \
            -backend-config="resource_group_name=${{ env.RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=terraform-state" \
            -backend-config="key=staging.tfstate"

      - name: Select Terraform Workspace
        working-directory: infrastructure/terraform/environments/staging
        run: terraform workspace select ${{ env.TF_WORKSPACE }} || terraform workspace new ${{ env.TF_WORKSPACE }}

      - name: Terraform Plan
        working-directory: infrastructure/terraform/environments/staging
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: infrastructure/terraform/environments/staging
        run: terraform apply -auto-approve tfplan

  build-and-push-images:
    name: Build and Push Images
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --debug

      - name: Login to Azure Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ACR_NAME }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: src/backend
          file: src/backend/Dockerfile
          push: true
          tags: ${{ env.ACR_NAME }}.azurecr.io/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PYTHON_VERSION=3.11
            POETRY_VERSION=1.7.0

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: src/web
          file: src/web/Dockerfile
          push: true
          tags: ${{ env.ACR_NAME }}.azurecr.io/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-kubernetes:
    name: Deploy to Kubernetes
    needs: build-and-push-images
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.27.3'

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.CLUSTER_NAME }}

      - name: Deploy Blue Environment
        run: |
          # Update image tags in deployment files
          sed -i "s|image:.*|image: ${{ env.ACR_NAME }}.azurecr.io/backend:${{ github.sha }}|" infrastructure/kubernetes/backend/deployment.yaml
          sed -i "s|image:.*|image: ${{ env.ACR_NAME }}.azurecr.io/frontend:${{ github.sha }}|" infrastructure/kubernetes/frontend/deployment.yaml
          
          # Deploy blue environment
          kubectl apply -f infrastructure/kubernetes/backend/deployment.yaml
          kubectl apply -f infrastructure/kubernetes/frontend/deployment.yaml

      - name: Wait for Deployment
        run: |
          kubectl rollout status deployment/backend-blue -n staging --timeout=${{ env.DEPLOY_TIMEOUT }}s
          kubectl rollout status deployment/frontend-blue -n staging --timeout=${{ env.DEPLOY_TIMEOUT }}s

      - name: Run Integration Tests
        run: |
          # Wait for services to be ready
          kubectl wait --for=condition=ready pod -l app=backend-blue -n staging --timeout=${{ env.DEPLOY_TIMEOUT }}s
          kubectl wait --for=condition=ready pod -l app=frontend-blue -n staging --timeout=${{ env.DEPLOY_TIMEOUT }}s
          
          # Run integration tests
          npm run test:integration

      - name: Switch Traffic
        if: success()
        run: |
          # Update service selectors to point to blue deployment
          kubectl patch service backend-service -n staging -p '{"spec":{"selector":{"deployment":"blue"}}}'
          kubectl patch service frontend-service -n staging -p '{"spec":{"selector":{"deployment":"blue"}}}'
          
          # Remove old green deployment if exists
          kubectl delete deployment backend-green frontend-green -n staging --ignore-not-found

      - name: Rollback on Failure
        if: failure()
        run: |
          # Revert to previous deployment
          kubectl rollout undo deployment/backend-blue -n staging
          kubectl rollout undo deployment/frontend-blue -n staging
          
          # Notify team of failure
          echo "::error::Deployment failed, rolling back to previous version"

      - name: Update Deployment Status
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "::set-output name=deployment_status::success"
            echo "::set-output name=app_url::https://staging.example.com"
          else
            echo "::set-output name=deployment_status::failure"
          fi